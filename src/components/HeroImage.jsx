// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Author: Xavi Pujadas (https://sketchfab.com/XaviPujadas)
// License: CC-BY-NC-ND-4.0 (http://creativecommons.org/licenses/by-nc-nd/4.0/)
// Source: https://sketchfab.com/3d-models/sci-fi-panels-c1243c5a9e954c539b2c181c886dad62
// Title: Sci-Fi Panels
// */

// import { useRef } from "react";
// import { useGLTF, useAnimations } from "@react-three/drei";

// const HeroImage = (props) => {
//   const group = useRef();
//   const { nodes, materials, animations } = useGLTF("/models/sci-fi_panels.glb");
//   const { actions } = useAnimations(animations, group);
//   return (
//     <group ref={group} {...props} dispose={null}>
//       <group name="Sketchfab_Scene">
//         <group
//           name="Sketchfab_model"
//           position={[0, -3, 0]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={0.05}
//         >
//           <group
//             name="ff5b6b89bb5645798bba547b0e63daf2fbx"
//             rotation={[Math.PI / 2, 0, 0]}
//           >
//             <group name="Object_2">
//               <group name="RootNode">
//                 <group
//                   name="Paneles_Low"
//                   position={[0, 1.443, 0.19]}
//                   rotation={[-1.134, 0, 0]}
//                 >
//                   <mesh
//                     name="Paneles_Low__0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes.Paneles_Low__0.geometry}
//                     material={materials.Paneles_Low__0}
//                   />
//                 </group>
//                 <group
//                   name="Plane001"
//                   position={[4.05, 82.828, -56.52]}
//                   scale={0}
//                 >
//                   <mesh
//                     name="Plane001_Material_#2_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Plane001_Material_#2_0"].geometry}
//                     material={materials.Material_2}
//                   />
//                 </group>
//                 <group
//                   name="Sphere002"
//                   position={[162.859, 50.888, 14.684]}
//                   rotation={[-Math.PI / 2, 0, 0]}
//                 >
//                   <mesh
//                     name="Sphere002_Material_#3_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Sphere002_Material_#3_0"].geometry}
//                     material={materials.Material_3}
//                   />
//                 </group>
//                 <group
//                   name="Plane005"
//                   position={[-162.396, 89.748, -57.101]}
//                   scale={0}
//                 >
//                   <mesh
//                     name="Plane005_Material_#4_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Plane005_Material_#4_0"].geometry}
//                     material={materials.Material_4}
//                   />
//                 </group>
//                 <group
//                   name="Plane006"
//                   position={[162.365, 56.763, -57.216]}
//                   scale={0}
//                 >
//                   <mesh
//                     name="Plane006_Material_#7_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Plane006_Material_#7_0"].geometry}
//                     material={materials.Material_7}
//                   />
//                 </group>
//                 <group
//                   name="Sphere004"
//                   position={[35.724, 4.522, 14.621]}
//                   rotation={[2.094, 0, 0]}
//                 />
//                 <group
//                   name="Plane007"
//                   position={[-164.039, 10.593, 1.279]}
//                   scale={0}
//                 >
//                   <mesh
//                     name="Plane007_Material_#9_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Plane007_Material_#9_0"].geometry}
//                     material={materials.Material_9}
//                   />
//                 </group>
//                 <group
//                   name="Plane008"
//                   position={[-52.572, 8.688, 0.391]}
//                   rotation={[-1.134, 0, 0]}
//                 >
//                   <mesh
//                     name="Plane008_Material_#8_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Plane008_Material_#8_0"].geometry}
//                     material={materials.Material_8}
//                   />
//                 </group>
//                 <group
//                   name="Plane009"
//                   position={[15.028, 16.376, -11.121]}
//                   rotation={[-1.134, 0, 0]}
//                 >
//                   <mesh
//                     name="Plane009_Material_#10_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Plane009_Material_#10_0"].geometry}
//                     material={materials.Material_10}
//                   />
//                 </group>
//                 <group
//                   name="Plane010"
//                   position={[81.558, 20.582, -21.527]}
//                   rotation={[-1.134, 0, 0]}
//                 >
//                   <mesh
//                     name="Plane010_Material_#11_0"
//                     castShadow
//                     receiveShadow
//                     geometry={nodes["Plane010_Material_#11_0"].geometry}
//                     material={materials.Material_11}
//                   />
//                 </group>
//                 <group
//                   name="Plane012"
//                   position={[33.501, 3.566, 12.886]}
//                   rotation={[-1.134, 0, 0]}
//                 >
//                   <group name="Object_24" position={[1.439, 0.139, -0.065]}>
//                     <mesh
//                       name="Plane012_Material_#6_0"
//                       castShadow
//                       receiveShadow
//                       geometry={nodes["Plane012_Material_#6_0"].geometry}
//                       material={materials.Material_6}
//                     />
//                   </group>
//                 </group>
//                 <group
//                   name="Plane019"
//                   position={[-355.134, 3.566, 12.886]}
//                   rotation={[-1.134, 0, 0]}
//                 />
//                 <group
//                   name="Plane020"
//                   position={[-352.622, 3.566, 12.886]}
//                   rotation={[-1.134, 0, 0]}
//                 />
//                 <group
//                   name="Plane021"
//                   position={[17.317, 3.566, 12.886]}
//                   rotation={[-1.134, 0, 0]}
//                 >
//                   <group name="Object_29" position={[1.439, 0.139, -0.065]}>
//                     <mesh
//                       name="Plane021_Material_#6_0"
//                       castShadow
//                       receiveShadow
//                       geometry={nodes["Plane021_Material_#6_0"].geometry}
//                       material={materials.Material_6}
//                     />
//                   </group>
//                 </group>
//                 <group
//                   name="Plane022"
//                   position={[3.891, 2.765, 14.602]}
//                   rotation={[-1.134, 0, 0]}
//                   scale={0.549}
//                 >
//                   <group name="Object_32" position={[1.439, 0.139, -0.065]}>
//                     <mesh
//                       name="Plane022_Material_#6_0"
//                       castShadow
//                       receiveShadow
//                       geometry={nodes["Plane022_Material_#6_0"].geometry}
//                       material={materials.Material_6}
//                     />
//                   </group>
//                 </group>
//                 <group
//                   name="Plane023"
//                   position={[-5.187, 2.765, 14.602]}
//                   rotation={[-1.134, 0, 0]}
//                   scale={0.549}
//                 >
//                   <group name="Object_35" position={[1.439, 0.139, -0.065]}>
//                     <mesh
//                       name="Plane023_Material_#6_0"
//                       castShadow
//                       receiveShadow
//                       geometry={nodes["Plane023_Material_#6_0"].geometry}
//                       material={materials.Material_6}
//                     />
//                   </group>
//                 </group>
//                 <group
//                   name="Plane024"
//                   position={[70.368, 10.624, -2.251]}
//                   rotation={[-1.134, 0, 0]}
//                 >
//                   <group name="Object_38" position={[1.439, 0.139, -0.065]}>
//                     <mesh
//                       name="Plane024_Material_#6_0"
//                       castShadow
//                       receiveShadow
//                       geometry={nodes["Plane024_Material_#6_0"].geometry}
//                       material={materials.Material_6}
//                     />
//                   </group>
//                 </group>
//                 <group
//                   name="Plane025"
//                   position={[84.09, 11.123, -3.322]}
//                   rotation={[-1.134, 0, 0]}
//                   scale={0.549}
//                 >
//                   <group name="Object_41" position={[1.439, 0.139, -0.065]}>
//                     <mesh
//                       name="Plane025_Material_#6_0"
//                       castShadow
//                       receiveShadow
//                       geometry={nodes["Plane025_Material_#6_0"].geometry}
//                       material={materials.Material_6}
//                     />
//                   </group>
//                 </group>
//               </group>
//             </group>
//           </group>
//         </group>
//       </group>
//     </group>
//   );
// };

// useGLTF.preload("/models/sci-fi_panels.glb");

// export default HeroImage;
// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Author: maomornity (https://sketchfab.com/maomornity)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/sci-fi-hud-quillvr-4dd7b9979a624a53aa7ce601ea98a707
// Title: SCI-FI HUD - QuillVR
// */

// import { useGLTF } from "@react-three/drei";

// const HeroImage = (props) => {
//   const { nodes, materials } = useGLTF("/models/sci-fi_hud_-_quillvr.glb");

//   return (
//     <>
//       <group {...props} dispose={null}>
//         <group position={[0, 8, 0]} scale={0.5}>
//           <group rotation={[Math.PI / 2, 0, 0]}>
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_9.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_11.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_13.geometry}
//               material={materials.Orangeglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_15.geometry}
//               material={materials.Redglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_17.geometry}
//               material={materials.Redglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_20.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_22.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_24.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_26.geometry}
//               material={materials.Orangeglow03}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_28.geometry}
//               material={materials.Orangeglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_30.geometry}
//               material={materials.Redglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_32.geometry}
//               material={materials.Redglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_35.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_37.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_39.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_41.geometry}
//               material={materials.Orangeglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_43.geometry}
//               material={materials.Orangeglow03}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_45.geometry}
//               material={materials.Redglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_48.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_50.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_52.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_54.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_56.geometry}
//               material={materials.Orangeglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_58.geometry}
//               material={materials.Orangeglow03}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_60.geometry}
//               material={materials.Redglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_63.geometry}
//               material={materials.Orangeglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_65.geometry}
//               material={materials.Whiteglow}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_66.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_68.geometry}
//               material={materials["Materialbase.002"]}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_70.geometry}
//               material={materials.Octogon}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_74.geometry}
//               material={materials.Orangeglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_76.geometry}
//               material={materials.Redglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_77.geometry}
//               material={materials.Blueglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_80.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_82.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_84.geometry}
//               material={materials.Blueglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_86.geometry}
//               material={materials.Matrixright}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_88.geometry}
//               material={materials.Matrixleft}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_90.geometry}
//               material={materials.Bargraphright}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_92.geometry}
//               material={materials.Bargraphleft}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_96.geometry}
//               material={materials.Blueglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_98.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_100.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_102.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_104.geometry}
//               material={materials.Orangeglow02}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_106.geometry}
//               material={materials.Cyanglow01}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_108.geometry}
//               material={materials.Cyanglow01}
//               position={[4.004, -24.453, 6.443]}
//               scale={0.767}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_110.geometry}
//               material={materials.Cyanglow01}
//               position={[27.185, -24.446, 19.54]}
//               scale={0.767}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Object_112.geometry}
//               material={materials.Blueglow02}
//               position={[-16.012, -24.281, 26.462]}
//               scale={0.526}
//             />
//           </group>
//         </group>
//       </group>
//     </>
//   );
// };

// useGLTF.preload("/models/sci-fi_hud_-_quillvr.glb");

// export default HeroImage;
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Snooze (https://sketchfab.com/Snooze)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-sci-fi-tablet-ee1fde7ec1514fd5a61790809ebd46a6
Title: Low Poly Sci-Fi Tablet
*/

// import { useGLTF } from "@react-three/drei";
// import { useRef } from "react";
// import { Raycaster, Vector2, Mesh } from "three";
// import { useThree } from "@react-three/fiber";

// const HeroImage = (props) => {
//   const { nodes, materials } = useGLTF("/models/low_poly_sci-fi_tablet.glb");
//   const groupRef = useRef();
//   const raycaster = new Raycaster();
//   const mouse = new Vector2();

//   const handlePointerMove = (event) => {
//     // Update the mouse variable with normalized device coordinates
//     const { clientX, clientY } = event;
//     const { width, height } = event.target.getBoundingClientRect();
//     mouse.x = (clientX / width) * 2 - 1;
//     mouse.y = -(clientY / height) * 2 + 1;
//   };

//   const handleClick = () => {
//     // Perform raycasting to determine which mesh was clicked
//     raycaster.setFromCamera(mouse, props.camera);
//     const intersects = raycaster.intersectObjects(
//       groupRef.current.children,
//       true
//     ); // Check all child meshes

//     if (intersects.length > 0) {
//       const clickedMesh = intersects[0].object; // The mesh that was clicked
//       console.log("Clicked mesh:", clickedMesh);
//       // Perform your logic based on the clicked mesh
//       // For example:
//       if (clickedMesh.material === materials.MAT_TabletGlass) {
//         console.log("Tablet Glass clicked!");
//       } else if (clickedMesh.material === materials.MAT_OpacityText) {
//         console.log("Opacity Text clicked!");
//       } else if (clickedMesh.material === materials.MAT_Tablet) {
//         console.log("Tablet clicked!");
//       }
//     }
//   };

//   return (
//     <group
//       ref={groupRef}
//       {...props}
//       dispose={null}
//       onPointerOver={(e) => (document.body.style.cursor = "pointer")}
//       onPointerOut={(e) => (document.body.style.cursor = "default")}
//       onClick={handleClick}
//       onPointerMove={handlePointerMove} // Attach pointer move event to handle raycasting
//     >
//       <group position={[0, -1.5, 0]} rotation={[0, 0, 0]} scale={5}>
//         <group rotation={[Math.PI / 2, 0, 0]}>
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial.geometry}
//             material={materials.MAT_TabletGlass}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial_1.geometry}
//             material={materials.MAT_OpacityText}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial_2.geometry}
//             material={materials.MAT_Tablet}
//           />
//         </group>
//       </group>
//     </group>
//   );
// };

// useGLTF.preload("/models/low_poly_sci-fi_tablet.glb");

// export default HeroImage;
// import { useGLTF } from "@react-three/drei";
// import { useRef } from "react";
// import { Raycaster, Vector2 } from "three";
// import { useThree } from "@react-three/fiber"; // Import useThree to access the camera

// const HeroImage = (props) => {
//   const { nodes, materials } = useGLTF("/models/low_poly_sci-fi_tablet.glb");
//   const groupRef = useRef();
//   const raycaster = new Raycaster();
//   const mouse = new Vector2();

//   // Use the useThree hook to access the camera
//   const { camera } = useThree();

//   const handlePointerMove = (event) => {
//     // Update the mouse variable with normalized device coordinates
//     const { clientX, clientY } = event;
//     const { width, height } = event.target.getBoundingClientRect();

//     // Normalize mouse coordinates
//     mouse.x = (clientX / width) * 2 - 1;
//     mouse.y = -(clientY / height) * 2 + 1;
//   };

//   const handleClick = () => {
//     raycaster.setFromCamera(mouse, props.camera);
//     const intersects = raycaster.intersectObjects(
//       groupRef.current.children,
//       true
//     );
//   };

//   return (
//     <group
//       ref={groupRef}
//       {...props}
//       dispose={null}
//       onPointerOver={(e) => (document.body.style.cursor = "pointer")}
//       onPointerOut={(e) => (document.body.style.cursor = "default")}
//       onClick={handleClick}
//       onPointerMove={handlePointerMove} // Attach pointer move event to handle raycasting
//     >
//       <group position={[0, -1.5, 0]} rotation={[0, 0, 0]} scale={5}>
//         <group rotation={[Math.PI / 2, 0, 0]}>
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial.geometry}
//             material={materials.MAT_TabletGlass}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial_1.geometry}
//             material={materials.MAT_OpacityText}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial_2.geometry}
//             material={materials.MAT_Tablet}
//           />
//         </group>
//       </group>
//     </group>
//   );
// };

// useGLTF.preload("/models/low_poly_sci-fi_tablet.glb");

// export default HeroImage;

// import { useGLTF } from "@react-three/drei";
// import { useRef } from "react";
// import { Raycaster, Vector2 } from "three";
// import { useThree } from "@react-three/fiber"; // Import useThree to access the camera

// const HeroImage = (props) => {
//   const { nodes, materials } = useGLTF("/models/low_poly_sci-fi_tablet.glb");
//   const groupRef = useRef();
//   const raycaster = new Raycaster();
//   const mouse = new Vector2();

//   // Use the useThree hook to access the camera and canvas
//   const { camera, gl } = useThree();
//   const canvas = gl.domElement; // Get the canvas element

//   const handlePointerMove = (event) => {
//     // Update the mouse variable with normalized device coordinates
//     const { clientX, clientY } = event;

//     // Use the canvas dimensions
//     const { width, height } = canvas.getBoundingClientRect();

//     // Normalize mouse coordinates
//     mouse.x = (clientX / width) * 2 - 1;
//     mouse.y = -(clientY / height) * 2 + 1;
//   };

//   const handleClick = () => {
//     raycaster.setFromCamera(mouse, props.camera);
//     const intersects = raycaster.intersectObjects(
//       groupRef.current.children,
//       true
//     );
//     // Handle intersections if needed
//   };

//   return (
//     <group
//       ref={groupRef}
//       {...props}
//       dispose={null}
//       onPointerOver={(e) => (document.body.style.cursor = "pointer")}
//       onPointerOut={(e) => (document.body.style.cursor = "default")}
//       onClick={handleClick}
//       onPointerMove={handlePointerMove} // Attach pointer move event to handle raycasting
//     >
//       <group position={[0, -1.5, 0]} rotation={[0, 0, 0]} scale={5}>
//         <group rotation={[Math.PI / 2, 0, 0]}>
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial.geometry}
//             material={materials.MAT_TabletGlass}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial_1.geometry}
//             material={materials.MAT_OpacityText}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.defaultMaterial_2.geometry}
//             material={materials.MAT_Tablet}
//           />
//         </group>
//       </group>
//     </group>
//   );
// };

// useGLTF.preload("/models/low_poly_sci-fi_tablet.glb");

// export default HeroImage;
// import { useGLTF } from "@react-three/drei";
// import { useRef } from "react";
// import { Raycaster, Vector2 } from "three";
// import { useThree } from "@react-three/fiber";

// const HeroImage = ({ onClick, ...props }) => {
//   const { nodes, materials } = useGLTF("/models/low_poly_sci-fi_tablet.glb");
//   const groupRef = useRef();
//   const raycaster = new Raycaster();
//   const mouse = new Vector2();
//   const { camera, gl } = useThree();
//   const canvas = gl.domElement;

//   const handlePointerMove = (event) => {
//     const { clientX, clientY } = event;
//     const { width, height } = canvas.getBoundingClientRect();

//     mouse.x = (clientX / width) * 2 - 1;
//     mouse.y = -(clientY / height) * 2 + 1;
//   };

//   const handleClick = () => {
//     raycaster.setFromCamera(mouse, camera);
//     const intersects = raycaster.intersectObjects(
//       groupRef.current.children,
//       true
//     );

//     if (intersects.length > 0) {
//       console.log("Intersected object:", intersects[0]);
//       // Trigger some action here, e.g., changing color or triggering an animation
//     } else {
//       console.log("No intersections detected");
//     }
//   };

//   return (
//     <group
//       ref={groupRef}
//       {...props}
//       dispose={null}
//       onPointerOver={(e) => (document.body.style.cursor = "pointer")}
//       onPointerOut={(e) => (document.body.style.cursor = "default")}
//       onClick={handleClick}
//       onPointerMove={handlePointerMove}
//     >
//       <group position={[0, -1.5, 0]} rotation={[0, 0, 0]} scale={5}>
//         <group rotation={[Math.PI / 2, 0, 0]}>
//           <mesh {...props} onClick={onClick} style={{ cursor: "pointer" }}>
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.defaultMaterial.geometry}
//               material={materials.MAT_TabletGlass}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.defaultMaterial_1.geometry}
//               material={materials.MAT_OpacityText}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.defaultMaterial_2.geometry}
//               material={materials.MAT_Tablet}
//             />
//           </mesh>
//         </group>
//       </group>
//     </group>
//   );
// };

// useGLTF.preload("/models/low_poly_sci-fi_tablet.glb");

// export default HeroImage;
import { useGLTF } from "@react-three/drei";
import { useRef } from "react";
// import { Raycaster, Vector2 } from "three";
// import { useThree } from "@react-three/fiber";

const HeroImage = ({ onClick, ...props }) => {
  const { nodes, materials } = useGLTF("/models/low_poly_sci-fi_tablet.glb");
  const groupRef = useRef();
  // const raycaster = new Raycaster();
  // const mouse = new Vector2();
  // const { camera, gl } = useThree();
  // const canvas = gl.domElement;

  // Update mouse position on pointer move
  // const handlePointerMove = (event) => {
  //   const { clientX, clientY } = event;
  //   const { width, height } = canvas.getBoundingClientRect();
  //   mouse.x = (clientX / width) * 2 - 1;
  //   mouse.y = -(clientY / height) * 2 + 1;

  //   // Update raycaster on pointer move
  //   raycaster.setFromCamera(mouse, camera);
  // };

  // const handlePointerDown = (event) => {
  //   // Use raycaster to check for intersections on click
  //   const intersects = raycaster.intersectObjects(
  //     groupRef.current.children,
  //     true
  //   );

  //   if (intersects.length > 0) {
  //     console.log("Intersected object:", intersects[0]);
  //     // Trigger some action here
  //     if (onClick) onClick(); // Call the passed onClick function if provided
  //   } else {
  //     console.log("No intersections detected");
  //   }
  // };

  return (
    <group
      ref={groupRef}
      {...props}
      dispose={null}
      onClick={onClick} // Use the click handler passed from Hero
      onPointerOver={(e) => (document.body.style.cursor = "pointer")}
      onPointerOut={(e) => (document.body.style.cursor = "default")}
      // onPointerOver={(e) => (document.body.style.cursor = "pointer")}
      // onPointerOut={(e) => (document.body.style.cursor = "default")}
      // onPointerMove={handlePointerMove} // Track mouse movements
      // onPointerDown={handlePointerDown} // Trigger click handling
    >
      <group position={[0, -1.5, 0]} rotation={[0, 0, 0]} scale={5}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh castShadow receiveShadow>
            <mesh
              geometry={nodes.defaultMaterial.geometry}
              material={materials.MAT_TabletGlass}
            />
            <mesh
              geometry={nodes.defaultMaterial_1.geometry}
              material={materials.MAT_OpacityText}
            />
            <mesh
              geometry={nodes.defaultMaterial_2.geometry}
              material={materials.MAT_Tablet}
            />
          </mesh>
        </group>
      </group>
    </group>
  );
};

useGLTF.preload("/models/low_poly_sci-fi_tablet.glb");

export default HeroImage;
